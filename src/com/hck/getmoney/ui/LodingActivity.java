package com.hck.getmoney.ui;import java.net.InetAddress;import java.net.NetworkInterface;import java.net.SocketException;import java.util.Enumeration;import org.json.JSONException;import org.json.JSONObject;import android.app.Activity;import android.content.Context;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.os.Bundle;import android.os.Handler;import android.util.Log;import android.view.View;import android.view.WindowManager;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.hck.getmoney.data.Data;import com.hck.getmoney.data.HttpUrls;import com.hck.getmoney.net.JsonHttpResponseHandler;import com.hck.getmoney.net.RequestParams;import com.hck.getmoney.util.HttpUtil;import com.hck.getmoney.util.JsonUtil;import com.hck.getmoney.util.MyPreferences;import com.hck.getmoney.util.MyTools;import com.hck.getmoney.util.UIHelp;import com.hck.getmoney.widget.AlertDialogs;import com.hck.getmoney.widget.AlertDialogs.OneBtOnclick;import com.hck.getmoney.widget.Toasts;import com.hck.kedouzq.R;import com.qq.e.splash.SplashAd;import com.qq.e.splash.SplashAdListener;public class LodingActivity extends Activity {	private ImageView imageView;	private TextView textView;	private boolean isFirst;	private View view;	boolean isOk = false;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,				WindowManager.LayoutParams.FLAG_FULLSCREEN);		setContentView(R.layout.activity_loding);		FrameLayout layout = (FrameLayout) findViewById(R.id.loadingAd);		loadAd(layout);		addUser();		initShareBean();		getShare();		getNews();		initDate();		view = findViewById(R.id.pb);		imageView = (ImageView) findViewById(R.id.loding);		textView = (TextView) findViewById(R.id.text_error);	}	private void initShareBean() {		Data.shareBean.setContent(getData(R.string.share_content));		Data.shareBean.setImageUrl(getData(R.string.share_img_url));		Data.shareBean.setUrlString(getData(R.string.share_url));	}	private String getData(int id) {		String content = getResources().getString(id);		return content;	}	Handler handler = new Handler() {		public void handleMessage(android.os.Message msg) {			startMainActivity();		};	};	private void startMainActivity() {		view.setVisibility(View.GONE);		UIHelp.startMainActivity(LodingActivity.this);	}	private void initDate() {		new MyPreferences(this);		new MyTools(this);		isFirst = MyPreferences.getBoolean("isfirst", true);	}	private void addUser() {		if (MyTools.getImei(this) == null) {			// AlertDialogs.alert(this, "", "请允许获取您的手机imei，用来唯一注册账号的", false);			Toasts.toast(this, "请允许手机获取IMEI作为你的唯一标识");			finish();			return;		} else if (MyTools.getImei(this).equals("000000000000000")) {			Toasts.toast(this, "模拟器，不能使用本软件");			this.finish();			return;		}		RequestParams params = new RequestParams();		params.put("mac", MyTools.getImei(this));		params.put("phone", MyTools.getTel(this));		// params.put("yqm", ); // 邀请码		params.put("point", 0 + "");		params.put("xh", MyTools.getModel());		params.put("sdk", MyTools.getSDK());		params.put("ips", getLocalIpAddress());		HttpUtil.getHttpUtil().get(HttpUrls.addUser, params,				new JsonHttpResponseHandler() {					public void onFailure(Throwable error, String content) {						try {							AlertDialogs.alert(LodingActivity.this, "",									"您的网络不佳,无法进去，请重试", false,									new OneBtOnclick() {										@Override										public void callBack(int tag) {											finish();										}									}, 1);						} catch (Exception e) {						}					};					public void onFinish(String url) {					};					public void onSuccess(int statusCode,							org.json.JSONObject response) {						try {							boolean isOk = response.getBoolean("isok");							if (isOk) {								JsonUtil.getJsonUtil().getUserData(response);								if (Data.userBean.getIsok() == 0) {									imageView.setVisibility(View.GONE);									textView.setVisibility(View.VISIBLE);									view.setVisibility(View.GONE);									return;								}								handler.sendEmptyMessage(1);							} else {								Toasts.toast(LodingActivity.this,										"注册用户失败 请检查网络");							}						} catch (JSONException e) {							e.printStackTrace();							Toasts.toast(LodingActivity.this, "未知错误");						}					};				});	}	private void getShare() {		HttpUtil.getHttpUtil().get(HttpUrls.getShareP,				new JsonHttpResponseHandler() {					@Override					public void onFailure(Throwable error, String content) {						super.onFailure(error, content);					}					@Override					public void onFinish(String url) {						super.onFinish(url);					}					@Override					public void onSuccess(int statusCode, JSONObject response) {						super.onSuccess(statusCode, response);						try {							isOk = response.getBoolean("isok");							if (isOk) {								JsonUtil.getJsonUtil().getShare(response);							}						} catch (Exception e) {						}					}				});	}	public String getLocalIpAddress() {		String mac = getLocalMacAddress();		try {			for (Enumeration<NetworkInterface> en = NetworkInterface					.getNetworkInterfaces(); en.hasMoreElements();) {				NetworkInterface intf = en.nextElement();				for (Enumeration<InetAddress> enumIpAddr = intf						.getInetAddresses(); enumIpAddr.hasMoreElements();) {					InetAddress inetAddress = enumIpAddr.nextElement();					if (!inetAddress.isLoopbackAddress()) {						return inetAddress.getHostAddress().toString() + " "								+ mac;					}				}			}		} catch (SocketException ex) {			Log.e("ifo", ex.toString());		}		return "";	}	public String getLocalMacAddress() {		WifiManager wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);		WifiInfo info = wifi.getConnectionInfo();		return info.getMacAddress();	}	private void getNews() {		HttpUtil.getHttpUtil().get(HttpUrls.getNewsP,				new JsonHttpResponseHandler() {					@Override					public void onFailure(Throwable error, String content) {						super.onFailure(error, content);						Log.d("hck", "onFailure: " + content.toString());					}					@Override					public void onFinish(String url) {						super.onFinish(url);					}					@Override					public void onSuccess(int statusCode, JSONObject response) {						super.onSuccess(statusCode, response);						try {							isOk = response.getBoolean("isok");							if (isOk) {								JsonUtil.getJsonUtil().getNews(response);								if ("开".equals(Data.news)) {								}							}						} catch (Exception e) {						}					}				});	}	/**	 * public static final String APPId = "1101152570"; public static final	 * String BannerPosId = "9079537218417626401"; public static final String	 * APPWallPosId = "9007479624379698465"; public static final String	 * InterteristalPosId = "8575134060152130849"; public static final String	 * SplashPosId = "8863364436303842593";	 * 	 * @param view	 */	private void loadAd(FrameLayout view) {		new SplashAd(this, view, "1101152570", "8863364436303842593",				new SplashAdListener() {					@Override					public void onAdPresent() {						Log.i("hck", "splash  present");					}					@Override					public void onAdFailed(int arg0) {						Log.i("hck", "splash fail fail" + arg0);					}					@Override					public void onAdDismissed() {						Log.i("hck", "splash dismissed");					}				});	}}